# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
ZSH_DISABLE_COMPFIX=true
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# export PATH=/usr/local/cuda-11.3/bin:$PATH
# export LD_LIBRARY_PATH=/usr/local/cuda-11.3/lib64:$LD_LIBRARY_PATH
# export CUDA_HOME=/usr/local/cuda
# export CUDA_PATH=/usr/local/cuda
export DOCKER_HOST=unix:///run/user/650216/docker.sock

alias blender='/local-scratch/localhome/asa409/Documents/blender/blender-3.0.0-linux-x64/blender'
alias blender-python='/local-scratch/localhome/asa409/Documents/blender/blender-3.0.0-linux-x64/blender --background --python'
# alias blender='/local-scratch/localhome/asa409/Downloads/blender-3.6.0-linux-x64/blender'
# alias blender-python='/local-scratch/localhome/asa409/Downloads/blender-3.6.0-linux-x64/blender --background --python'
#function blender-python() {
#    if [ "$1" == "-q" ] || [ "$1" == "--quiet" ] ; then
#        blender --background --python "$2" 1> /dev/null
#    else
#        blender --background --python "$1"
#    fi
#}

export PATH=/usr/bin:$PATH
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64
export PATH=$PATH:$CUDA_HOME/bin

alias vi=nvim
alias vim=nvim
alias rm='/bin/safe-rm'
alias rm='safe-rm'

alias c='clear'
alias cc='clear;clear'

# search a command throug your history
#
alias h='history'
alias hs='history | grep'
alias hsi='history | grep -i'
alias icat="kitty +kitten icat"

export TERM=xterm-256color
export TERMINAL='kitty'
export EDITOR='nvim'
export BROWSER='chrome' #brave
# Search on the web
# web_search from terminal

function web_search() {
  emulate -L zsh

  # define search engine URLS
  typeset -A urls
  urls=(
    reddit          "https://www.reddit.com/search/?q=" 
    google          "https://www.google.com/search?q="
    brave           "https://search.brave.com/search?q="
    github          "https://github.com/search?q="
    stackoverflow   "https://stackoverflow.com/search?q="
    scholar         "https://scholar.google.com/scholar?q="
  )

  # check whether the search engine is supported
  if [[ -z "$urls[$1]" ]]; then
    echo "Search engine '$1' not supported."
    return 1
  fi

  # search or go to main page depending on number of arguments passed
  if [[ $# -gt 1 ]]; then
    # build search url:
    # join arguments passed with '+', then append to search engine URL
    url="${urls[$1]}$(omz_urlencode ${@[2,-1]})"
  else
    # build main page url:
    # split by '/', then rejoin protocol (1) and domain (2) parts with '//'
    url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
  fi

  open_command "$url"
}

alias reddit='web_search reddit'
alias google='web_search google'
alias github='web_search github'
alias stackoverflow='web_search stackoverflow'
alias scholar='web_search scholar'

#
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell" # set by `omz`

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  common-aliases  
  git-extras 
  colorize
  colored-man-pages
  rsync
  git
  git-prompt
  zsh-autosuggestions 
  zsh-syntax-highlighting
 catimg  zsh-vi-mode
 zsh-fzf-history-search
)

# Restore some keymaps removed by vim keybind mode                                                      
bindkey '^P' up-history                                                                             
bindkey '^N' down-history                                                                               
bindkey '^?' backward-delete-char                                                                       
bindkey '^h' backward-delete-char                                                                       
bindkey '^w' backward-kill-word                                                                         
                                                                                                        
source $ZSH/oh-my-zsh.sh
# Dependencies for the following lines                                                                  
zmodload zsh/zle                                                                                        
autoload -U colors && colors 
# By default, we have insert mode shown on right hand side                                          
export RPROMPT="%{$fg[blue]%}[INSERT]%{$reset_color%}"                                                  
                                                                                                        
# And also a beam as the cursor                                                                         
echo -ne '\e[5 q'                                                                                       
                                                                                                        
# Callback for vim mode change                                                                          
function zle-keymap-select () {                                                                         
    # Only supported in these terminals                                                                 
    if [ "$TERM" = "xterm-256color" ] || [ "$TERM" = "xterm-kitty" ] || [ "$TERM" = "screen-256         
color" ]; then                                                                                          
        if [ $KEYMAP = vicmd ]; then                                                                
            # Command mode                                                                          
            export RPROMPT="%{$fg[green]%}[NORMAL]%{$reset_color%}"                                 
                                                                                                    
            # Set block cursor                                                                      
            echo -ne '\e[1 q'                                                                       
        else                                                                                        
            # Insert mode                                                                           
            export RPROMPT="%{$fg[blue]%}[INSERT]%{$reset_color%}"                                  
                                                                                                    
            # Set beam cursor                                                                       
            echo -ne '\e[5 q'                                                                       
        fi                                                                                          
    fi                                                                                              
                                                                                                    
    if typeset -f prompt_pure_update_vim_prompt_widget > /dev/null; then                            
        # Refresh prompt and call Pure super function                                               
        prompt_pure_update_vim_prompt_widget                                                        
    fi                                                                                              
}                                                                                                   
                                                                                                    
# Bind the callback                                                                                 
zle -N zle-keymap-select                                                                            
                                                                                                    
# Reduce latency when pressing <Esc>                                                                
export KEYTIMEOUT=1
ZSH_TMUX_AUTOSTART=false
# # You may need to manually set your language environment
# export LANG=en_US.UTF-8
#
# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='nvim'
 else
   export EDITOR='nvim'
 fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias open=xdg-open

alias lvim=/localhome/asa409/.local/bin/lvim


bindkey -v
source /localhome/asa409/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/localhome/asa409/projects/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/localhome/asa409/projects/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/localhome/asa409/projects/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/localhome/asa409/projects/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# export PATH:/usr/local/cuda-12.1/bin:$PATH
# export LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:$LD_LIBRARY_PATH
# The plugin will auto execute this zvm_after_init function
function zvm_after_init() {
}


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if ! command -v compdef &> /dev/null; then
    autoload -Uz compinit
    compinit
fi

export PATH=/usr/local/cuda-11.3/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-11.3/lib64:$LD_LIBRARY_PATH

# Source nerfstudio autocompletions.
if ! command -v compdef &> /dev/null; then
    autoload -Uz compinit
    compinit
fi
source /local-scratch/localhome/asa409/sdfstudio/scripts/completions/setup.zsh